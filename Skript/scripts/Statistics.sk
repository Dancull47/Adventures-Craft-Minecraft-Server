import:
    net.Indyuce.mmocore.MMOCore
    net.Indyuce.mmocore.api.experience.EXPSource
    net.Indyuce.mmocore.api.experience.Profession
    net.Indyuce.mmocore.api.player.PlayerData
    org.bukkit.Bukkit
    org.bukkit.event.EventHandler
    org.bukkit.event.HandlerList
    org.bukkit.event.Listener
    org.bukkit.Statistic
    org.bukkit.Material
    net.Indyuce.mmocore.api.event.CustomBlockMineEvent
    net.Indyuce.mmocore.api.block.VanillaBlockType
    net.Indyuce.mmocore.api.block.BlockType

on CustomBlockMineEvent:
    if event.getPlayer() is a player:
        if event.canBreak():        
            execute console command "/q point %event.getPlayer()% add blocks.%event.getBlock().getType()% 1"

# on CustomBlockMineEvent:
#     set {_block} to event.getBlock().getType()
#     if event.getPlayer() is a player:
#         if event.canBreak():        
# #        broadcast "%{block}%"
#             if "%{block}%" is "STONE":
#                 if chance of 50%:
#                     execute console command "/mi give CONSUMABLE BORGS_BOX %event.getPlayer()% 1"

#        broadcast "%event.getPlayer()% %event.getBlock().getType()%" #This is a test to return the block which was broken

# command /tttt [<text>]:
#     executable by: players
#     trigger:
#         broadcast "%player.getStatistic(Statistic.MINE_BLOCK, Material.OAK_LOG)%" #This is an example of a working method using 
#                                                                                   #Spigot's api to return a value

on mythicmob deathevent:
    loop get threattable of activemob event-activemob:
        if loop-value is a player:
            execute console command "/q point %event-killer% add mobs.%event-activemob% 1"
            execute console command "/q point %event-killer% add faction.%faction of activemob event-activemob% 1"
#        else:
#        broadcast "%event-killer% & %event-activemob% %faction of activemob event-activemob% & %get threattable of activemob event-activemob%"
#        execute console command "/q point %event-killer% add faction.%faction of activemob event-activemob% 1"
# Loop through threattable list and run command for each?

# on mythicmob deathevent:
#     if event-killer is a player:
#         loop all items of mobdrop event-mobdrop:
#             set {_am} to loop-mobitem
#             send "%loop-mobitem% " to console
#             give loop-mobitem to event-killer 
















# on join:
#     if world of player is "Spawn" or "Homes":
#         set {Health::%player%} to placeholder "mmocore_health" parsed as offline player
#         set {Mana::%player%} to placeholder "mmocore_stat_max_mana"
#         set {Defense::%player%} to placeholder "mmoitems_stat_defense"
#         set {Speed::%player%} to placeholder "mmocore_stat_movement_speed"
#         set {Damage::%player%} to placeholder "mmocore_stat_attack_damage"
#         set {AttackSpeed::%player%} to placeholder "mmocore_stat_attack_speed"
#         set {CritDamage::%player%} to placeholder "mmocore_stat_critical_strike_chance"
#         set {CritChance::%player%} to placeholder "mmocore_stat_critical_strike_power"

# on placeholderapi placeholder request for the prefix "custom":
#     if the identifier is "Health":
#         set the result to "%{Health::%player%}%" 
#     if the identifier is "Mana":
#         set the result to "%{Mana::%player%}%"
#     if the identifier is "Defense":
#         set the result to "%{Defense::%player%}%"
#     if the identifier is "Speed":
#         set the result to "%{Speed::%player%}%"
#     if the identifier is "Damage":
#         set the result to "%{Damage::%player%}%"
#     if the identifier is "AttackSpeed":
#         set the result to "%{AttackSpeed::%player%}%"
#     if the identifier is "CritDamage":
#         set the result to "%{CritDamage::%player%}%"
#     if the identifier is "CritChance":
#         set the result to "%{CritChance::%player%}%"

# command /examine <player>:
#     executable by: player
#     trigger:
#         set {_capper} to placeholder "vault_eco_balance_commas" from arg-1
#         send "Ping of %arg-1%: %{_capper}%" to player

# command /placeholdertest <player>:
#     trigger:
#         set {_player} to arg-1
#         set {%{_player}%.class} to the placeholder "vault_eco_balance_commas" from {_player} parsed as player
#         send "%{%{_player}%.class}%" to executor
